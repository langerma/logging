filter {
    if [type] == "pfsense" {
        grok {
            add_tag => [ "firewall" ]
            match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
        }
		mutate {
			gsub => ["datetime","  "," "]
		}
		date {
			match => [ "datetime", "MMM dd HH:mm:ss" ]
		}
		mutate {
			replace => [ "message", "%{msg}" ]
		}
		mutate {
			remove_field => [ "msg", "datetime" ]
		}
	}
	if [prog] =~ /^filterlog$/ {
		mutate {
			remove_field => [ "msg", "datetime" ]
		}
		grok {
			patterns_dir => ["/usr/local/etc/logstash/patterns"]
			match => [ "message", "%{LOG_DATA}%{IP_SPECIFIC_DATA}%{IP_DATA}%{PROTOCOL_DATA}" ]
		}
		geoip {
			add_tag => [ "GeoIP" ]
			source => "src_ip"
		}
		geoip {
			add_tag => [ "GeoIP" ]
			source => "dest_ip"
		}
		if "_grokparsefailure" in [tags] {
			mutate {
				remove_tag => [ "_grokparsefailure" ]
			}
			grok {
				patterns_dir => ["/usr/local/etc/logstash/patterns"]
				match => [ "message", "%{LOG_DATA}%{IPv6_SPECIFIC_DATA}%{IP_DATA}%{PROTOCOL_DATA}" ]
			}
		}
	}
	if [prog] =~ /^snort/ {
		mutate {
        		add_tag => [ "snort" ]
      		}
	}
	if [prog] =~ /^suricata/ {
		mutate {
                        add_tag => [ "snort" ]
                }
        }
}


# Snort parsing
filter {
  if "snort" in [tags] {
    if "firewall" in [tags] {
      grok {
        match => [
          "message", "\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids_priority}].*{%{WORD:ids_proto}}.*%{IP:src_ip}:%{INT:src_port} \-\>.*%{IP:dst_ip}:%{INT:dst_port}",
          "message", "\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids_priority}].*\{PROTO:%{WORD:ids_proto}.*%{IP:src_ip} \-\>.*%{IP:dst_ip}",
          "message", "%{DATE} -- %{HAPROXYTIME}%{GREEDYDATA} - <%{DATA:ids_severity}> -- %{GREEDYDATA:ids_message}"
	]
      }
      grok {
        match => [
          "message", "\[%{DATA:ids_signature}:%{INT}].%{GREEDYDATA}"
        ]
      }
    }
    if "firewall" not in [tags] and [type] == "snort" {
      grok {
        match => [
          "message", "%{DATESTAMP:timestamp}.*\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids_priority}].*{%{WORD:ids_proto}}.*%{IP:src_ip}:%{INT:src_port} \-\>.*%{IP:dst_ip}:%{INT:dst_port}",
          "message", "%{DATESTAMP:timestamp}.*\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids_priority}].*\{PROTO:%{WORD:ids_proto}.*%{IP:src_ip} \-\>.*%{IP:dst_ip}"
        ]
      }
      grok {
        match => [
          "message", "%{DATESTAMP}.*\[%{DATA:ids_signature}:%{INT}].%{GREEDYDATA}"
        ]
      }
    }
    translate {
    field => "ids_priority"
      destination => "ids_priority_full"
      dictionary => [
        "1", "High",
        "2", "Medium",
        "3", "Low"
      ]
    }
    geoip {
      source => "src_ip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    geoip {
      source => "dst_ip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
    if [ids_signature] {
      if [ids_alert] =~ /^GPL/ {
        mutate {
          add_tag => [ "Snort-ET-sig" ]
          add_field => [ "ids_rule_type", "Emerging Threats" ]
        }
      }
      if [ids_alert] =~ /^ET/ {
        mutate {
          add_tag => [ "Snort-ET-sig" ]
          add_field => [ "ids_rule_type", "Emerging Threats" ]
        }
      }
      if "Snort-ET-sig" not in [tags] {
        mutate {
          add_tag => [ "Snort-sig" ]
          add_field => [ "ids_rule_type", "Snort" ]
        }
      }
    }
    if "Snort-sig" in [tags] {
      if [ids_gid] == "1" {
        mutate {
          add_field => [ "Signature_Info", "http://rootedyour.com/snortsid?sid=%{ids_sid}" ]
        }
      }
      if [ids_gid] != "1" {
        mutate {
          add_field => [ "Signature_Info", "http://rootedyour.com/snortsid?sid=%{ids_gid}-%{ids_sid}" ]
        }
      }
    }
    if "Snort-ET-sig" in [tags] {
      mutate {
        add_field => [ "Signature_Info", "http://doc.emergingthreats.net/bin/view/Main/%{ids_sid}" ]
      }
    }
  }
}
